use crate::error::URError;
use alloc::format;
use alloc::string::{String, ToString};
use core::fmt::Display;

/// https://github.com/satoshilabs/slips/blob/master/slip-0044.md
/// https://github.com/cosmos/chain-registry

// todo add more chain type
#[derive(Clone, Debug, Default)]
pub enum ChainType {
    #[default]
    BTC,
    ETH,
    SOL,
    XRP,
    ADA,
    TRX,
    LTC,
    BCH,
    APT,
    SUI,
    DASH,
    AR,
    XLM,
    TIA,
    ATOM,
    DYM,
    OSMO,
    INJ,
    CRO,
    KAVA,
    LUNC,
    AXL,
    LUNA,
    AKT,
    STRD,
    SCRT,
    BLD,
    CTK,
    EVMOS,
    STARS,
    XPRT,
    SOMM,
    JUNO,
    IRIS,
    DVPN,
    ROWAN,
    REGEN,
    BOOT,
    GRAV,
    IXO,
    NGM,
    IOV,
    UMEE,
    QCK,
    TGD,
}
impl TryFrom<String> for ChainType {
    type Error = URError;

    fn try_from(value: String) -> Result<Self, Self::Error> {
        let value = value.as_str();
        match value {
            "BTC" => Ok(ChainType::BTC),
            "ETH" => Ok(ChainType::ETH),
            "SOL" => Ok(ChainType::SOL),
            "XRP" => Ok(ChainType::XRP),
            "ADA" => Ok(ChainType::ADA),
            "TRX" => Ok(ChainType::TRX),
            "LTC" => Ok(ChainType::LTC),
            "BCH" => Ok(ChainType::BCH),
            "APT" => Ok(ChainType::APT),
            "SUI" => Ok(ChainType::SUI),
            "DASH" => Ok(ChainType::DASH),
            "AR" => Ok(ChainType::AR),
            "XLM" => Ok(ChainType::XLM),
            "TIA" => Ok(ChainType::TIA),
            "ATOM" => Ok(ChainType::ATOM),
            "DYM" => Ok(ChainType::DYM),
            "OSMO" => Ok(ChainType::OSMO),
            "INJ" => Ok(ChainType::INJ),
            "CRO" => Ok(ChainType::CRO),
            "KAVA" => Ok(ChainType::KAVA),
            "LUNC" => Ok(ChainType::LUNC),
            "AXL" => Ok(ChainType::AXL),
            "LUNA" => Ok(ChainType::LUNA),
            "AKT" => Ok(ChainType::AKT),
            "STRD" => Ok(ChainType::STRD),
            "SCRT" => Ok(ChainType::SCRT),
            "BLD" => Ok(ChainType::BLD),
            "CTK" => Ok(ChainType::CTK),
            "EVMOS" => Ok(ChainType::EVMOS),
            "STARS" => Ok(ChainType::STARS),
            "XPRT" => Ok(ChainType::XPRT),
            "SOMM" => Ok(ChainType::SOMM),
            "JUNO" => Ok(ChainType::JUNO),
            "IRIS" => Ok(ChainType::IRIS),
            "DVPN" => Ok(ChainType::DVPN),
            "ROWAN" => Ok(ChainType::ROWAN),
            "REGEN" => Ok(ChainType::REGEN),
            "BOOT" => Ok(ChainType::BOOT),
            "GRAV" => Ok(ChainType::GRAV),
            "IXO" => Ok(ChainType::IXO),
            "NGM" => Ok(ChainType::NGM),
            "IOV" => Ok(ChainType::IOV),
            "UMEE" => Ok(ChainType::UMEE),
            "QCK" => Ok(ChainType::QCK),
            "TGD" => Ok(ChainType::TGD),
            _ => Err(URError::CborDecodeError(format!(
                "KeyDerivationSchema: invalid chain type {}",
                value
            ))),
        }
    }
}
impl Display for ChainType {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let str = match self {
            ChainType::BTC => "BTC",
            ChainType::ETH => "ETH",
            ChainType::SOL => "SOL",
            ChainType::XRP => "XRP",
            ChainType::ADA => "ADA",
            ChainType::TRX => "TRX",
            ChainType::LTC => "LTC",
            ChainType::BCH => "BCH",
            ChainType::APT => "APT",
            ChainType::SUI => "SUI",
            ChainType::DASH => "DASH",
            ChainType::AR => "AR",
            ChainType::XLM => "XLM",
            ChainType::TIA => "TIA",
            ChainType::ATOM => "ATOM",
            ChainType::DYM => "DYM",
            ChainType::OSMO => "OSMO",
            ChainType::INJ => "INJ",
            ChainType::CRO => "CRO",
            ChainType::KAVA => "KAVA",
            ChainType::LUNC => "LUNC",
            ChainType::AXL => "AXL",
            ChainType::LUNA => "LUNA",
            ChainType::AKT => "AKT",
            ChainType::STRD => "STRD",
            ChainType::SCRT => "SCRT",
            ChainType::BLD => "BLD",
            ChainType::CTK => "CTK",
            ChainType::EVMOS => "EVMOS",
            ChainType::STARS => "STARS",
            ChainType::XPRT => "XPRT",
            ChainType::SOMM => "SOMM",
            ChainType::JUNO => "JUNO",
            ChainType::IRIS => "IRIS",
            ChainType::DVPN => "DVPN",
            ChainType::ROWAN => "ROWAN",
            ChainType::REGEN => "REGEN",
            ChainType::BOOT => "BOOT",
            ChainType::GRAV => "GRAV",
            ChainType::IXO => "IXO",
            ChainType::NGM => "NGM",
            ChainType::IOV => "IOV",
            ChainType::UMEE => "UMEE",
            ChainType::QCK => "QCK",
            ChainType::TGD => "TGD",
        };
        write!(f, "{}", str)
    }
}