// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `protos/contract.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.TransferContract)
pub struct TransferContract {
    // message fields
    // @@protoc_insertion_point(field:protocol.TransferContract.owner_address)
    pub owner_address: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protocol.TransferContract.to_address)
    pub to_address: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protocol.TransferContract.amount)
    pub amount: i64,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.TransferContract.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TransferContract {
    fn default() -> &'a TransferContract {
        <TransferContract as ::protobuf::Message>::default_instance()
    }
}

impl TransferContract {
    pub fn new() -> TransferContract {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "owner_address",
            |m: &TransferContract| { &m.owner_address },
            |m: &mut TransferContract| { &mut m.owner_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "to_address",
            |m: &TransferContract| { &m.to_address },
            |m: &mut TransferContract| { &mut m.to_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "amount",
            |m: &TransferContract| { &m.amount },
            |m: &mut TransferContract| { &mut m.amount },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TransferContract>(
            "TransferContract",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TransferContract {
    const NAME: &'static str = "TransferContract";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.owner_address = is.read_bytes()?;
                },
                18 => {
                    self.to_address = is.read_bytes()?;
                },
                24 => {
                    self.amount = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.owner_address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.owner_address);
        }
        if !self.to_address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.to_address);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.amount);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.owner_address.is_empty() {
            os.write_bytes(1, &self.owner_address)?;
        }
        if !self.to_address.is_empty() {
            os.write_bytes(2, &self.to_address)?;
        }
        if self.amount != 0 {
            os.write_int64(3, self.amount)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TransferContract {
        TransferContract::new()
    }

    fn clear(&mut self) {
        self.owner_address.clear();
        self.to_address.clear();
        self.amount = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TransferContract {
        static instance: TransferContract = TransferContract {
            owner_address: ::std::vec::Vec::new(),
            to_address: ::std::vec::Vec::new(),
            amount: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TransferContract {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TransferContract").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TransferContract {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransferContract {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.TransferAssetContract)
pub struct TransferAssetContract {
    // message fields
    // @@protoc_insertion_point(field:protocol.TransferAssetContract.asset_name)
    pub asset_name: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protocol.TransferAssetContract.owner_address)
    pub owner_address: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protocol.TransferAssetContract.to_address)
    pub to_address: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protocol.TransferAssetContract.amount)
    pub amount: i64,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.TransferAssetContract.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TransferAssetContract {
    fn default() -> &'a TransferAssetContract {
        <TransferAssetContract as ::protobuf::Message>::default_instance()
    }
}

impl TransferAssetContract {
    pub fn new() -> TransferAssetContract {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "asset_name",
            |m: &TransferAssetContract| { &m.asset_name },
            |m: &mut TransferAssetContract| { &mut m.asset_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "owner_address",
            |m: &TransferAssetContract| { &m.owner_address },
            |m: &mut TransferAssetContract| { &mut m.owner_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "to_address",
            |m: &TransferAssetContract| { &m.to_address },
            |m: &mut TransferAssetContract| { &mut m.to_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "amount",
            |m: &TransferAssetContract| { &m.amount },
            |m: &mut TransferAssetContract| { &mut m.amount },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TransferAssetContract>(
            "TransferAssetContract",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TransferAssetContract {
    const NAME: &'static str = "TransferAssetContract";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.asset_name = is.read_bytes()?;
                },
                18 => {
                    self.owner_address = is.read_bytes()?;
                },
                26 => {
                    self.to_address = is.read_bytes()?;
                },
                32 => {
                    self.amount = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.asset_name.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.asset_name);
        }
        if !self.owner_address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.owner_address);
        }
        if !self.to_address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.to_address);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::int64_size(4, self.amount);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.asset_name.is_empty() {
            os.write_bytes(1, &self.asset_name)?;
        }
        if !self.owner_address.is_empty() {
            os.write_bytes(2, &self.owner_address)?;
        }
        if !self.to_address.is_empty() {
            os.write_bytes(3, &self.to_address)?;
        }
        if self.amount != 0 {
            os.write_int64(4, self.amount)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TransferAssetContract {
        TransferAssetContract::new()
    }

    fn clear(&mut self) {
        self.asset_name.clear();
        self.owner_address.clear();
        self.to_address.clear();
        self.amount = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TransferAssetContract {
        static instance: TransferAssetContract = TransferAssetContract {
            asset_name: ::std::vec::Vec::new(),
            owner_address: ::std::vec::Vec::new(),
            to_address: ::std::vec::Vec::new(),
            amount: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TransferAssetContract {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TransferAssetContract").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TransferAssetContract {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransferAssetContract {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.TriggerSmartContract)
pub struct TriggerSmartContract {
    // message fields
    // @@protoc_insertion_point(field:protocol.TriggerSmartContract.owner_address)
    pub owner_address: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protocol.TriggerSmartContract.contract_address)
    pub contract_address: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protocol.TriggerSmartContract.call_value)
    pub call_value: i64,
    // @@protoc_insertion_point(field:protocol.TriggerSmartContract.data)
    pub data: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protocol.TriggerSmartContract.call_token_value)
    pub call_token_value: i64,
    // @@protoc_insertion_point(field:protocol.TriggerSmartContract.token_id)
    pub token_id: i64,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.TriggerSmartContract.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TriggerSmartContract {
    fn default() -> &'a TriggerSmartContract {
        <TriggerSmartContract as ::protobuf::Message>::default_instance()
    }
}

impl TriggerSmartContract {
    pub fn new() -> TriggerSmartContract {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "owner_address",
            |m: &TriggerSmartContract| { &m.owner_address },
            |m: &mut TriggerSmartContract| { &mut m.owner_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "contract_address",
            |m: &TriggerSmartContract| { &m.contract_address },
            |m: &mut TriggerSmartContract| { &mut m.contract_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "call_value",
            |m: &TriggerSmartContract| { &m.call_value },
            |m: &mut TriggerSmartContract| { &mut m.call_value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &TriggerSmartContract| { &m.data },
            |m: &mut TriggerSmartContract| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "call_token_value",
            |m: &TriggerSmartContract| { &m.call_token_value },
            |m: &mut TriggerSmartContract| { &mut m.call_token_value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "token_id",
            |m: &TriggerSmartContract| { &m.token_id },
            |m: &mut TriggerSmartContract| { &mut m.token_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TriggerSmartContract>(
            "TriggerSmartContract",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TriggerSmartContract {
    const NAME: &'static str = "TriggerSmartContract";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.owner_address = is.read_bytes()?;
                },
                18 => {
                    self.contract_address = is.read_bytes()?;
                },
                24 => {
                    self.call_value = is.read_int64()?;
                },
                34 => {
                    self.data = is.read_bytes()?;
                },
                40 => {
                    self.call_token_value = is.read_int64()?;
                },
                48 => {
                    self.token_id = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.owner_address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.owner_address);
        }
        if !self.contract_address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.contract_address);
        }
        if self.call_value != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.call_value);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.data);
        }
        if self.call_token_value != 0 {
            my_size += ::protobuf::rt::int64_size(5, self.call_token_value);
        }
        if self.token_id != 0 {
            my_size += ::protobuf::rt::int64_size(6, self.token_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.owner_address.is_empty() {
            os.write_bytes(1, &self.owner_address)?;
        }
        if !self.contract_address.is_empty() {
            os.write_bytes(2, &self.contract_address)?;
        }
        if self.call_value != 0 {
            os.write_int64(3, self.call_value)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(4, &self.data)?;
        }
        if self.call_token_value != 0 {
            os.write_int64(5, self.call_token_value)?;
        }
        if self.token_id != 0 {
            os.write_int64(6, self.token_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TriggerSmartContract {
        TriggerSmartContract::new()
    }

    fn clear(&mut self) {
        self.owner_address.clear();
        self.contract_address.clear();
        self.call_value = 0;
        self.data.clear();
        self.call_token_value = 0;
        self.token_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TriggerSmartContract {
        static instance: TriggerSmartContract = TriggerSmartContract {
            owner_address: ::std::vec::Vec::new(),
            contract_address: ::std::vec::Vec::new(),
            call_value: 0,
            data: ::std::vec::Vec::new(),
            call_token_value: 0,
            token_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TriggerSmartContract {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TriggerSmartContract").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TriggerSmartContract {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TriggerSmartContract {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15protos/contract.proto\x12\x08protocol\"n\n\x10TransferContract\x12\
    #\n\rowner_address\x18\x01\x20\x01(\x0cR\x0cownerAddress\x12\x1d\n\nto_a\
    ddress\x18\x02\x20\x01(\x0cR\ttoAddress\x12\x16\n\x06amount\x18\x03\x20\
    \x01(\x03R\x06amount\"\x92\x01\n\x15TransferAssetContract\x12\x1d\n\nass\
    et_name\x18\x01\x20\x01(\x0cR\tassetName\x12#\n\rowner_address\x18\x02\
    \x20\x01(\x0cR\x0cownerAddress\x12\x1d\n\nto_address\x18\x03\x20\x01(\
    \x0cR\ttoAddress\x12\x16\n\x06amount\x18\x04\x20\x01(\x03R\x06amount\"\
    \xde\x01\n\x14TriggerSmartContract\x12#\n\rowner_address\x18\x01\x20\x01\
    (\x0cR\x0cownerAddress\x12)\n\x10contract_address\x18\x02\x20\x01(\x0cR\
    \x0fcontractAddress\x12\x1d\n\ncall_value\x18\x03\x20\x01(\x03R\tcallVal\
    ue\x12\x12\n\x04data\x18\x04\x20\x01(\x0cR\x04data\x12(\n\x10call_token_\
    value\x18\x05\x20\x01(\x03R\x0ecallTokenValue\x12\x19\n\x08token_id\x18\
    \x06\x20\x01(\x03R\x07tokenIdJ\xc4\x07\n\x06\x12\x04\0\0\x18\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x11\n\n\n\x02\x04\
    \0\x12\x04\x04\0\x08\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08\x18\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03\x05\x02\x1a\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x05\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\x08\x15\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x05\x18\x19\n\x0b\n\x04\x04\0\x02\x01\x12\x03\
    \x06\x02\x17\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x06\x02\x07\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\x06\x08\x12\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x06\x15\x16\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x07\x02\x13\n\x0c\
    \n\x05\x04\0\x02\x02\x05\x12\x03\x07\x02\x07\n\x0c\n\x05\x04\0\x02\x02\
    \x01\x12\x03\x07\x08\x0e\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x07\x11\
    \x12\n\n\n\x02\x04\x01\x12\x04\n\0\x0f\x01\n\n\n\x03\x04\x01\x01\x12\x03\
    \n\x08\x1d\n\x9f\x01\n\x04\x04\x01\x02\0\x12\x03\x0b\x02\x17\"\x91\x01\
    \x20this\x20field\x20is\x20token\x20name\x20before\x20the\x20proposal\
    \x20ALLOW_SAME_TOKEN_NAME\x20is\x20active,\x20otherwise\x20it\x20is\x20t\
    oken\x20id\x20and\x20token\x20is\x20should\x20be\x20in\x20string\x20form\
    at.\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x0b\x02\x07\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03\x0b\x08\x12\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\
    \x0b\x15\x16\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0c\x02\x1a\n\x0c\n\x05\
    \x04\x01\x02\x01\x05\x12\x03\x0c\x02\x07\n\x0c\n\x05\x04\x01\x02\x01\x01\
    \x12\x03\x0c\x08\x15\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0c\x18\x19\
    \n\x0b\n\x04\x04\x01\x02\x02\x12\x03\r\x02\x17\n\x0c\n\x05\x04\x01\x02\
    \x02\x05\x12\x03\r\x02\x07\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\r\x08\
    \x12\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\r\x15\x16\n\x0b\n\x04\x04\
    \x01\x02\x03\x12\x03\x0e\x02\x13\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\
    \x0e\x02\x07\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x0e\x08\x0e\n\x0c\n\
    \x05\x04\x01\x02\x03\x03\x12\x03\x0e\x11\x12\n\n\n\x02\x04\x02\x12\x04\
    \x11\0\x18\x01\n\n\n\x03\x04\x02\x01\x12\x03\x11\x08\x1c\n\x0b\n\x04\x04\
    \x02\x02\0\x12\x03\x12\x02\x1a\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x12\
    \x02\x07\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x12\x08\x15\n\x0c\n\x05\
    \x04\x02\x02\0\x03\x12\x03\x12\x18\x19\n\x0b\n\x04\x04\x02\x02\x01\x12\
    \x03\x13\x02\x1d\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x13\x02\x07\n\
    \x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x13\x08\x18\n\x0c\n\x05\x04\x02\
    \x02\x01\x03\x12\x03\x13\x1b\x1c\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x14\
    \x02\x17\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x14\x02\x07\n\x0c\n\x05\
    \x04\x02\x02\x02\x01\x12\x03\x14\x08\x12\n\x0c\n\x05\x04\x02\x02\x02\x03\
    \x12\x03\x14\x15\x16\n\x0b\n\x04\x04\x02\x02\x03\x12\x03\x15\x02\x11\n\
    \x0c\n\x05\x04\x02\x02\x03\x05\x12\x03\x15\x02\x07\n\x0c\n\x05\x04\x02\
    \x02\x03\x01\x12\x03\x15\x08\x0c\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03\
    \x15\x0f\x10\n\x0b\n\x04\x04\x02\x02\x04\x12\x03\x16\x02\x1d\n\x0c\n\x05\
    \x04\x02\x02\x04\x05\x12\x03\x16\x02\x07\n\x0c\n\x05\x04\x02\x02\x04\x01\
    \x12\x03\x16\x08\x18\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03\x16\x1b\x1c\
    \n\x0b\n\x04\x04\x02\x02\x05\x12\x03\x17\x02\x15\n\x0c\n\x05\x04\x02\x02\
    \x05\x05\x12\x03\x17\x02\x07\n\x0c\n\x05\x04\x02\x02\x05\x01\x12\x03\x17\
    \x08\x10\n\x0c\n\x05\x04\x02\x02\x05\x03\x12\x03\x17\x13\x14b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(TransferContract::generated_message_descriptor_data());
            messages.push(TransferAssetContract::generated_message_descriptor_data());
            messages.push(TriggerSmartContract::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
