// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `protos/tron.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  AccountId, (name, address) use name, (null, address) use address, (name, null) use name,
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.AccountId)
pub struct AccountId {
    // message fields
    // @@protoc_insertion_point(field:protocol.AccountId.name)
    pub name: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protocol.AccountId.address)
    pub address: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.AccountId.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AccountId {
    fn default() -> &'a AccountId {
        <AccountId as ::protobuf::Message>::default_instance()
    }
}

impl AccountId {
    pub fn new() -> AccountId {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &AccountId| { &m.name },
            |m: &mut AccountId| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "address",
            |m: &AccountId| { &m.address },
            |m: &mut AccountId| { &mut m.address },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AccountId>(
            "AccountId",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AccountId {
    const NAME: &'static str = "AccountId";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_bytes()?;
                },
                18 => {
                    self.address = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.name);
        }
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_bytes(1, &self.name)?;
        }
        if !self.address.is_empty() {
            os.write_bytes(2, &self.address)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AccountId {
        AccountId::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.address.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AccountId {
        static instance: AccountId = AccountId {
            name: ::std::vec::Vec::new(),
            address: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AccountId {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AccountId").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AccountId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountId {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.authority)
pub struct Authority {
    // message fields
    // @@protoc_insertion_point(field:protocol.authority.account)
    pub account: ::protobuf::MessageField<AccountId>,
    // @@protoc_insertion_point(field:protocol.authority.permission_name)
    pub permission_name: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.authority.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Authority {
    fn default() -> &'a Authority {
        <Authority as ::protobuf::Message>::default_instance()
    }
}

impl Authority {
    pub fn new() -> Authority {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, AccountId>(
            "account",
            |m: &Authority| { &m.account },
            |m: &mut Authority| { &mut m.account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "permission_name",
            |m: &Authority| { &m.permission_name },
            |m: &mut Authority| { &mut m.permission_name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Authority>(
            "authority",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Authority {
    const NAME: &'static str = "authority";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.account)?;
                },
                18 => {
                    self.permission_name = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.account.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.permission_name.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.permission_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.account.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.permission_name.is_empty() {
            os.write_bytes(2, &self.permission_name)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Authority {
        Authority::new()
    }

    fn clear(&mut self) {
        self.account.clear();
        self.permission_name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Authority {
        static instance: Authority = Authority {
            account: ::protobuf::MessageField::none(),
            permission_name: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Authority {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("authority").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Authority {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Authority {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.Transaction)
pub struct Transaction {
    // message fields
    // @@protoc_insertion_point(field:protocol.Transaction.raw_data)
    pub raw_data: ::protobuf::MessageField<transaction::Raw>,
    ///  only support size = 1,  repeated list here for muti-sig extension
    // @@protoc_insertion_point(field:protocol.Transaction.signature)
    pub signature: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.Transaction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Transaction {
    fn default() -> &'a Transaction {
        <Transaction as ::protobuf::Message>::default_instance()
    }
}

impl Transaction {
    pub fn new() -> Transaction {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, transaction::Raw>(
            "raw_data",
            |m: &Transaction| { &m.raw_data },
            |m: &mut Transaction| { &mut m.raw_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "signature",
            |m: &Transaction| { &m.signature },
            |m: &mut Transaction| { &mut m.signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Transaction>(
            "Transaction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Transaction {
    const NAME: &'static str = "Transaction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.raw_data)?;
                },
                18 => {
                    self.signature.push(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.raw_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.signature {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.raw_data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.signature {
            os.write_bytes(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Transaction {
        Transaction::new()
    }

    fn clear(&mut self) {
        self.raw_data.clear();
        self.signature.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Transaction {
        static instance: Transaction = Transaction {
            raw_data: ::protobuf::MessageField::none(),
            signature: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Transaction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Transaction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Transaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Transaction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Transaction`
pub mod transaction {
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:protocol.Transaction.Contract)
    pub struct Contract {
        // message fields
        // @@protoc_insertion_point(field:protocol.Transaction.Contract.type)
        pub type_: ::protobuf::EnumOrUnknown<contract::ContractType>,
        // @@protoc_insertion_point(field:protocol.Transaction.Contract.parameter)
        pub parameter: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
        // @@protoc_insertion_point(field:protocol.Transaction.Contract.provider)
        pub provider: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:protocol.Transaction.Contract.ContractName)
        pub ContractName: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:protocol.Transaction.Contract.Permission_id)
        pub Permission_id: i32,
        // special fields
        // @@protoc_insertion_point(special_field:protocol.Transaction.Contract.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Contract {
        fn default() -> &'a Contract {
            <Contract as ::protobuf::Message>::default_instance()
        }
    }

    impl Contract {
        pub fn new() -> Contract {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(5);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "type",
                |m: &Contract| { &m.type_ },
                |m: &mut Contract| { &mut m.type_ },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
                "parameter",
                |m: &Contract| { &m.parameter },
                |m: &mut Contract| { &mut m.parameter },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "provider",
                |m: &Contract| { &m.provider },
                |m: &mut Contract| { &mut m.provider },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "ContractName",
                |m: &Contract| { &m.ContractName },
                |m: &mut Contract| { &mut m.ContractName },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "Permission_id",
                |m: &Contract| { &m.Permission_id },
                |m: &mut Contract| { &mut m.Permission_id },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Contract>(
                "Transaction.Contract",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Contract {
        const NAME: &'static str = "Contract";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.type_ = is.read_enum_or_unknown()?;
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.parameter)?;
                    },
                    26 => {
                        self.provider = is.read_bytes()?;
                    },
                    34 => {
                        self.ContractName = is.read_bytes()?;
                    },
                    40 => {
                        self.Permission_id = is.read_int32()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.type_ != ::protobuf::EnumOrUnknown::new(contract::ContractType::AccountCreateContract) {
                my_size += ::protobuf::rt::int32_size(1, self.type_.value());
            }
            if let Some(v) = self.parameter.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if !self.provider.is_empty() {
                my_size += ::protobuf::rt::bytes_size(3, &self.provider);
            }
            if !self.ContractName.is_empty() {
                my_size += ::protobuf::rt::bytes_size(4, &self.ContractName);
            }
            if self.Permission_id != 0 {
                my_size += ::protobuf::rt::int32_size(5, self.Permission_id);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.type_ != ::protobuf::EnumOrUnknown::new(contract::ContractType::AccountCreateContract) {
                os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
            }
            if let Some(v) = self.parameter.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            if !self.provider.is_empty() {
                os.write_bytes(3, &self.provider)?;
            }
            if !self.ContractName.is_empty() {
                os.write_bytes(4, &self.ContractName)?;
            }
            if self.Permission_id != 0 {
                os.write_int32(5, self.Permission_id)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Contract {
            Contract::new()
        }

        fn clear(&mut self) {
            self.type_ = ::protobuf::EnumOrUnknown::new(contract::ContractType::AccountCreateContract);
            self.parameter.clear();
            self.provider.clear();
            self.ContractName.clear();
            self.Permission_id = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Contract {
            static instance: Contract = Contract {
                type_: ::protobuf::EnumOrUnknown::from_i32(0),
                parameter: ::protobuf::MessageField::none(),
                provider: ::std::vec::Vec::new(),
                ContractName: ::std::vec::Vec::new(),
                Permission_id: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Contract {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Transaction.Contract").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Contract {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Contract {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Contract`
    pub mod contract {
        #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
        // @@protoc_insertion_point(enum:protocol.Transaction.Contract.ContractType)
        pub enum ContractType {
            // @@protoc_insertion_point(enum_value:protocol.Transaction.Contract.ContractType.AccountCreateContract)
            AccountCreateContract = 0,
            // @@protoc_insertion_point(enum_value:protocol.Transaction.Contract.ContractType.TransferContract)
            TransferContract = 1,
            // @@protoc_insertion_point(enum_value:protocol.Transaction.Contract.ContractType.TransferAssetContract)
            TransferAssetContract = 2,
            // @@protoc_insertion_point(enum_value:protocol.Transaction.Contract.ContractType.TriggerSmartContract)
            TriggerSmartContract = 31,
        }

        impl ::protobuf::Enum for ContractType {
            const NAME: &'static str = "ContractType";

            fn value(&self) -> i32 {
                *self as i32
            }

            fn from_i32(value: i32) -> ::std::option::Option<ContractType> {
                match value {
                    0 => ::std::option::Option::Some(ContractType::AccountCreateContract),
                    1 => ::std::option::Option::Some(ContractType::TransferContract),
                    2 => ::std::option::Option::Some(ContractType::TransferAssetContract),
                    31 => ::std::option::Option::Some(ContractType::TriggerSmartContract),
                    _ => ::std::option::Option::None
                }
            }

            const VALUES: &'static [ContractType] = &[
                ContractType::AccountCreateContract,
                ContractType::TransferContract,
                ContractType::TransferAssetContract,
                ContractType::TriggerSmartContract,
            ];
        }

        impl ::protobuf::EnumFull for ContractType {
            fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().enum_by_package_relative_name("Transaction.Contract.ContractType").unwrap()).clone()
            }

            fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
                let index = match self {
                    ContractType::AccountCreateContract => 0,
                    ContractType::TransferContract => 1,
                    ContractType::TransferAssetContract => 2,
                    ContractType::TriggerSmartContract => 3,
                };
                Self::enum_descriptor().value_by_index(index)
            }
        }

        impl ::std::default::Default for ContractType {
            fn default() -> Self {
                ContractType::AccountCreateContract
            }
        }

        impl ContractType {
            pub(in super::super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
                ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ContractType>("Transaction.Contract.ContractType")
            }
        }
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:protocol.Transaction.raw)
    pub struct Raw {
        // message fields
        // @@protoc_insertion_point(field:protocol.Transaction.raw.ref_block_bytes)
        pub ref_block_bytes: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:protocol.Transaction.raw.ref_block_num)
        pub ref_block_num: i64,
        // @@protoc_insertion_point(field:protocol.Transaction.raw.ref_block_hash)
        pub ref_block_hash: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:protocol.Transaction.raw.expiration)
        pub expiration: i64,
        // @@protoc_insertion_point(field:protocol.Transaction.raw.auths)
        pub auths: ::std::vec::Vec<super::Authority>,
        ///  data not used
        // @@protoc_insertion_point(field:protocol.Transaction.raw.data)
        pub data: ::std::vec::Vec<u8>,
        /// only support size = 1,  repeated list here for extension
        // @@protoc_insertion_point(field:protocol.Transaction.raw.contract)
        pub contract: ::std::vec::Vec<Contract>,
        ///  scripts not used
        // @@protoc_insertion_point(field:protocol.Transaction.raw.scripts)
        pub scripts: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:protocol.Transaction.raw.timestamp)
        pub timestamp: i64,
        // @@protoc_insertion_point(field:protocol.Transaction.raw.fee_limit)
        pub fee_limit: i64,
        // special fields
        // @@protoc_insertion_point(special_field:protocol.Transaction.raw.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Raw {
        fn default() -> &'a Raw {
            <Raw as ::protobuf::Message>::default_instance()
        }
    }

    impl Raw {
        pub fn new() -> Raw {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(10);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "ref_block_bytes",
                |m: &Raw| { &m.ref_block_bytes },
                |m: &mut Raw| { &mut m.ref_block_bytes },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "ref_block_num",
                |m: &Raw| { &m.ref_block_num },
                |m: &mut Raw| { &mut m.ref_block_num },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "ref_block_hash",
                |m: &Raw| { &m.ref_block_hash },
                |m: &mut Raw| { &mut m.ref_block_hash },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "expiration",
                |m: &Raw| { &m.expiration },
                |m: &mut Raw| { &mut m.expiration },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "auths",
                |m: &Raw| { &m.auths },
                |m: &mut Raw| { &mut m.auths },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "data",
                |m: &Raw| { &m.data },
                |m: &mut Raw| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "contract",
                |m: &Raw| { &m.contract },
                |m: &mut Raw| { &mut m.contract },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "scripts",
                |m: &Raw| { &m.scripts },
                |m: &mut Raw| { &mut m.scripts },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "timestamp",
                |m: &Raw| { &m.timestamp },
                |m: &mut Raw| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "fee_limit",
                |m: &Raw| { &m.fee_limit },
                |m: &mut Raw| { &mut m.fee_limit },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Raw>(
                "Transaction.raw",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Raw {
        const NAME: &'static str = "raw";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.ref_block_bytes = is.read_bytes()?;
                    },
                    24 => {
                        self.ref_block_num = is.read_int64()?;
                    },
                    34 => {
                        self.ref_block_hash = is.read_bytes()?;
                    },
                    64 => {
                        self.expiration = is.read_int64()?;
                    },
                    74 => {
                        self.auths.push(is.read_message()?);
                    },
                    82 => {
                        self.data = is.read_bytes()?;
                    },
                    90 => {
                        self.contract.push(is.read_message()?);
                    },
                    98 => {
                        self.scripts = is.read_bytes()?;
                    },
                    112 => {
                        self.timestamp = is.read_int64()?;
                    },
                    144 => {
                        self.fee_limit = is.read_int64()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.ref_block_bytes.is_empty() {
                my_size += ::protobuf::rt::bytes_size(1, &self.ref_block_bytes);
            }
            if self.ref_block_num != 0 {
                my_size += ::protobuf::rt::int64_size(3, self.ref_block_num);
            }
            if !self.ref_block_hash.is_empty() {
                my_size += ::protobuf::rt::bytes_size(4, &self.ref_block_hash);
            }
            if self.expiration != 0 {
                my_size += ::protobuf::rt::int64_size(8, self.expiration);
            }
            for value in &self.auths {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            if !self.data.is_empty() {
                my_size += ::protobuf::rt::bytes_size(10, &self.data);
            }
            for value in &self.contract {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            if !self.scripts.is_empty() {
                my_size += ::protobuf::rt::bytes_size(12, &self.scripts);
            }
            if self.timestamp != 0 {
                my_size += ::protobuf::rt::int64_size(14, self.timestamp);
            }
            if self.fee_limit != 0 {
                my_size += ::protobuf::rt::int64_size(18, self.fee_limit);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.ref_block_bytes.is_empty() {
                os.write_bytes(1, &self.ref_block_bytes)?;
            }
            if self.ref_block_num != 0 {
                os.write_int64(3, self.ref_block_num)?;
            }
            if !self.ref_block_hash.is_empty() {
                os.write_bytes(4, &self.ref_block_hash)?;
            }
            if self.expiration != 0 {
                os.write_int64(8, self.expiration)?;
            }
            for v in &self.auths {
                ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
            };
            if !self.data.is_empty() {
                os.write_bytes(10, &self.data)?;
            }
            for v in &self.contract {
                ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
            };
            if !self.scripts.is_empty() {
                os.write_bytes(12, &self.scripts)?;
            }
            if self.timestamp != 0 {
                os.write_int64(14, self.timestamp)?;
            }
            if self.fee_limit != 0 {
                os.write_int64(18, self.fee_limit)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Raw {
            Raw::new()
        }

        fn clear(&mut self) {
            self.ref_block_bytes.clear();
            self.ref_block_num = 0;
            self.ref_block_hash.clear();
            self.expiration = 0;
            self.auths.clear();
            self.data.clear();
            self.contract.clear();
            self.scripts.clear();
            self.timestamp = 0;
            self.fee_limit = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Raw {
            static instance: Raw = Raw {
                ref_block_bytes: ::std::vec::Vec::new(),
                ref_block_num: 0,
                ref_block_hash: ::std::vec::Vec::new(),
                expiration: 0,
                auths: ::std::vec::Vec::new(),
                data: ::std::vec::Vec::new(),
                contract: ::std::vec::Vec::new(),
                scripts: ::std::vec::Vec::new(),
                timestamp: 0,
                fee_limit: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Raw {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Transaction.raw").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Raw {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Raw {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11protos/tron.proto\x12\x08protocol\x1a\x19google/protobuf/any.proto\
    \"9\n\tAccountId\x12\x12\n\x04name\x18\x01\x20\x01(\x0cR\x04name\x12\x18\
    \n\x07address\x18\x02\x20\x01(\x0cR\x07address\"c\n\tauthority\x12-\n\
    \x07account\x18\x01\x20\x01(\x0b2\x13.protocol.AccountIdR\x07account\x12\
    '\n\x0fpermission_name\x18\x02\x20\x01(\x0cR\x0epermissionName\"\xa8\x06\
    \n\x0bTransaction\x124\n\x08raw_data\x18\x01\x20\x01(\x0b2\x19.protocol.\
    Transaction.rawR\x07rawData\x12\x1c\n\tsignature\x18\x02\x20\x03(\x0cR\t\
    signature\x1a\xda\x02\n\x08Contract\x12?\n\x04type\x18\x01\x20\x01(\x0e2\
    +.protocol.Transaction.Contract.ContractTypeR\x04type\x122\n\tparameter\
    \x18\x02\x20\x01(\x0b2\x14.google.protobuf.AnyR\tparameter\x12\x1a\n\x08\
    provider\x18\x03\x20\x01(\x0cR\x08provider\x12\"\n\x0cContractName\x18\
    \x04\x20\x01(\x0cR\x0cContractName\x12#\n\rPermission_id\x18\x05\x20\x01\
    (\x05R\x0cPermissionId\"t\n\x0cContractType\x12\x19\n\x15AccountCreateCo\
    ntract\x10\0\x12\x14\n\x10TransferContract\x10\x01\x12\x19\n\x15Transfer\
    AssetContract\x10\x02\x12\x18\n\x14TriggerSmartContract\x10\x1f\x1a\xe7\
    \x02\n\x03raw\x12&\n\x0fref_block_bytes\x18\x01\x20\x01(\x0cR\rrefBlockB\
    ytes\x12\"\n\rref_block_num\x18\x03\x20\x01(\x03R\x0brefBlockNum\x12$\n\
    \x0eref_block_hash\x18\x04\x20\x01(\x0cR\x0crefBlockHash\x12\x1e\n\nexpi\
    ration\x18\x08\x20\x01(\x03R\nexpiration\x12)\n\x05auths\x18\t\x20\x03(\
    \x0b2\x13.protocol.authorityR\x05auths\x12\x12\n\x04data\x18\n\x20\x01(\
    \x0cR\x04data\x12:\n\x08contract\x18\x0b\x20\x03(\x0b2\x1e.protocol.Tran\
    saction.ContractR\x08contract\x12\x18\n\x07scripts\x18\x0c\x20\x01(\x0cR\
    \x07scripts\x12\x1c\n\ttimestamp\x18\x0e\x20\x01(\x03R\ttimestamp\x12\
    \x1b\n\tfee_limit\x18\x12\x20\x01(\x03R\x08feeLimitJ\xc5\x0f\n\x06\x12\
    \x04\0\03\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\
    \x02\0#\n\x08\n\x01\x02\x12\x03\x04\0\x11\nf\n\x02\x04\0\x12\x04\x07\0\n\
    \x01\x1aZ\x20AccountId,\x20(name,\x20address)\x20use\x20name,\x20(null,\
    \x20address)\x20use\x20address,\x20(name,\x20null)\x20use\x20name,\n\n\n\
    \n\x03\x04\0\x01\x12\x03\x07\x08\x11\n\x0b\n\x04\x04\0\x02\0\x12\x03\x08\
    \x02\x11\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x08\x02\x07\n\x0c\n\x05\x04\
    \0\x02\0\x01\x12\x03\x08\x08\x0c\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x08\
    \x0f\x10\n\x0b\n\x04\x04\0\x02\x01\x12\x03\t\x02\x14\n\x0c\n\x05\x04\0\
    \x02\x01\x05\x12\x03\t\x02\x07\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\t\
    \x08\x0f\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\t\x12\x13\n\n\n\x02\x04\
    \x01\x12\x04\x0c\0\x0f\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0c\x08\x11\n\
    \x0b\n\x04\x04\x01\x02\0\x12\x03\r\x02\x18\n\x0c\n\x05\x04\x01\x02\0\x06\
    \x12\x03\r\x02\x0b\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\r\x0c\x13\n\x0c\
    \n\x05\x04\x01\x02\0\x03\x12\x03\r\x16\x17\n\x0b\n\x04\x04\x01\x02\x01\
    \x12\x03\x0e\x02\x1c\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0e\x02\x07\
    \n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0e\x08\x17\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x03\x0e\x1a\x1b\n\n\n\x02\x04\x02\x12\x04\x11\03\x01\n\
    \n\n\x03\x04\x02\x01\x12\x03\x11\x08\x13\n\x0c\n\x04\x04\x02\x03\0\x12\
    \x04\x12\x02\x1e\x03\n\x0c\n\x05\x04\x02\x03\0\x01\x12\x03\x12\n\x12\n\
    \x0e\n\x06\x04\x02\x03\0\x04\0\x12\x04\x13\x04\x18\x05\n\x0e\n\x07\x04\
    \x02\x03\0\x04\0\x01\x12\x03\x13\t\x15\n\x0f\n\x08\x04\x02\x03\0\x04\0\
    \x02\0\x12\x03\x14\x06\x20\n\x10\n\t\x04\x02\x03\0\x04\0\x02\0\x01\x12\
    \x03\x14\x06\x1b\n\x10\n\t\x04\x02\x03\0\x04\0\x02\0\x02\x12\x03\x14\x1e\
    \x1f\n\x0f\n\x08\x04\x02\x03\0\x04\0\x02\x01\x12\x03\x15\x06\x1b\n\x10\n\
    \t\x04\x02\x03\0\x04\0\x02\x01\x01\x12\x03\x15\x06\x16\n\x10\n\t\x04\x02\
    \x03\0\x04\0\x02\x01\x02\x12\x03\x15\x19\x1a\n\x0f\n\x08\x04\x02\x03\0\
    \x04\0\x02\x02\x12\x03\x16\x06\x20\n\x10\n\t\x04\x02\x03\0\x04\0\x02\x02\
    \x01\x12\x03\x16\x06\x1b\n\x10\n\t\x04\x02\x03\0\x04\0\x02\x02\x02\x12\
    \x03\x16\x1e\x1f\n\x0f\n\x08\x04\x02\x03\0\x04\0\x02\x03\x12\x03\x17\x06\
    \x20\n\x10\n\t\x04\x02\x03\0\x04\0\x02\x03\x01\x12\x03\x17\x06\x1a\n\x10\
    \n\t\x04\x02\x03\0\x04\0\x02\x03\x02\x12\x03\x17\x1d\x1f\n\r\n\x06\x04\
    \x02\x03\0\x02\0\x12\x03\x19\x04\x1a\n\x0e\n\x07\x04\x02\x03\0\x02\0\x06\
    \x12\x03\x19\x04\x10\n\x0e\n\x07\x04\x02\x03\0\x02\0\x01\x12\x03\x19\x11\
    \x15\n\x0e\n\x07\x04\x02\x03\0\x02\0\x03\x12\x03\x19\x18\x19\n\r\n\x06\
    \x04\x02\x03\0\x02\x01\x12\x03\x1a\x04&\n\x0e\n\x07\x04\x02\x03\0\x02\
    \x01\x06\x12\x03\x1a\x04\x17\n\x0e\n\x07\x04\x02\x03\0\x02\x01\x01\x12\
    \x03\x1a\x18!\n\x0e\n\x07\x04\x02\x03\0\x02\x01\x03\x12\x03\x1a$%\n\r\n\
    \x06\x04\x02\x03\0\x02\x02\x12\x03\x1b\x04\x17\n\x0e\n\x07\x04\x02\x03\0\
    \x02\x02\x05\x12\x03\x1b\x04\t\n\x0e\n\x07\x04\x02\x03\0\x02\x02\x01\x12\
    \x03\x1b\n\x12\n\x0e\n\x07\x04\x02\x03\0\x02\x02\x03\x12\x03\x1b\x15\x16\
    \n\r\n\x06\x04\x02\x03\0\x02\x03\x12\x03\x1c\x04\x1b\n\x0e\n\x07\x04\x02\
    \x03\0\x02\x03\x05\x12\x03\x1c\x04\t\n\x0e\n\x07\x04\x02\x03\0\x02\x03\
    \x01\x12\x03\x1c\n\x16\n\x0e\n\x07\x04\x02\x03\0\x02\x03\x03\x12\x03\x1c\
    \x19\x1a\n\r\n\x06\x04\x02\x03\0\x02\x04\x12\x03\x1d\x04\x1c\n\x0e\n\x07\
    \x04\x02\x03\0\x02\x04\x05\x12\x03\x1d\x04\t\n\x0e\n\x07\x04\x02\x03\0\
    \x02\x04\x01\x12\x03\x1d\n\x17\n\x0e\n\x07\x04\x02\x03\0\x02\x04\x03\x12\
    \x03\x1d\x1a\x1b\n\x0c\n\x04\x04\x02\x03\x01\x12\x04\x20\x02.\x03\n\x0c\
    \n\x05\x04\x02\x03\x01\x01\x12\x03\x20\n\r\n\r\n\x06\x04\x02\x03\x01\x02\
    \0\x12\x03!\x04\x1e\n\x0e\n\x07\x04\x02\x03\x01\x02\0\x05\x12\x03!\x04\t\
    \n\x0e\n\x07\x04\x02\x03\x01\x02\0\x01\x12\x03!\n\x19\n\x0e\n\x07\x04\
    \x02\x03\x01\x02\0\x03\x12\x03!\x1c\x1d\n\r\n\x06\x04\x02\x03\x01\x02\
    \x01\x12\x03\"\x04\x1c\n\x0e\n\x07\x04\x02\x03\x01\x02\x01\x05\x12\x03\"\
    \x04\t\n\x0e\n\x07\x04\x02\x03\x01\x02\x01\x01\x12\x03\"\n\x17\n\x0e\n\
    \x07\x04\x02\x03\x01\x02\x01\x03\x12\x03\"\x1a\x1b\n\r\n\x06\x04\x02\x03\
    \x01\x02\x02\x12\x03#\x04\x1d\n\x0e\n\x07\x04\x02\x03\x01\x02\x02\x05\
    \x12\x03#\x04\t\n\x0e\n\x07\x04\x02\x03\x01\x02\x02\x01\x12\x03#\n\x18\n\
    \x0e\n\x07\x04\x02\x03\x01\x02\x02\x03\x12\x03#\x1b\x1c\n\r\n\x06\x04\
    \x02\x03\x01\x02\x03\x12\x03$\x04\x19\n\x0e\n\x07\x04\x02\x03\x01\x02\
    \x03\x05\x12\x03$\x04\t\n\x0e\n\x07\x04\x02\x03\x01\x02\x03\x01\x12\x03$\
    \n\x14\n\x0e\n\x07\x04\x02\x03\x01\x02\x03\x03\x12\x03$\x17\x18\n\r\n\
    \x06\x04\x02\x03\x01\x02\x04\x12\x03%\x04!\n\x0e\n\x07\x04\x02\x03\x01\
    \x02\x04\x04\x12\x03%\x04\x0c\n\x0e\n\x07\x04\x02\x03\x01\x02\x04\x06\
    \x12\x03%\r\x16\n\x0e\n\x07\x04\x02\x03\x01\x02\x04\x01\x12\x03%\x17\x1c\
    \n\x0e\n\x07\x04\x02\x03\x01\x02\x04\x03\x12\x03%\x1f\x20\n\x1e\n\x06\
    \x04\x02\x03\x01\x02\x05\x12\x03'\x04\x14\x1a\x0f\x20data\x20not\x20used\
    \n\n\x0e\n\x07\x04\x02\x03\x01\x02\x05\x05\x12\x03'\x04\t\n\x0e\n\x07\
    \x04\x02\x03\x01\x02\x05\x01\x12\x03'\n\x0e\n\x0e\n\x07\x04\x02\x03\x01\
    \x02\x05\x03\x12\x03'\x11\x13\nH\n\x06\x04\x02\x03\x01\x02\x06\x12\x03)\
    \x04$\x1a9only\x20support\x20size\x20=\x201,\x20\x20repeated\x20list\x20\
    here\x20for\x20extension\n\n\x0e\n\x07\x04\x02\x03\x01\x02\x06\x04\x12\
    \x03)\x04\x0c\n\x0e\n\x07\x04\x02\x03\x01\x02\x06\x06\x12\x03)\r\x15\n\
    \x0e\n\x07\x04\x02\x03\x01\x02\x06\x01\x12\x03)\x16\x1e\n\x0e\n\x07\x04\
    \x02\x03\x01\x02\x06\x03\x12\x03)!#\n!\n\x06\x04\x02\x03\x01\x02\x07\x12\
    \x03+\x04\x17\x1a\x12\x20scripts\x20not\x20used\n\n\x0e\n\x07\x04\x02\
    \x03\x01\x02\x07\x05\x12\x03+\x04\t\n\x0e\n\x07\x04\x02\x03\x01\x02\x07\
    \x01\x12\x03+\n\x11\n\x0e\n\x07\x04\x02\x03\x01\x02\x07\x03\x12\x03+\x14\
    \x16\n\r\n\x06\x04\x02\x03\x01\x02\x08\x12\x03,\x04\x19\n\x0e\n\x07\x04\
    \x02\x03\x01\x02\x08\x05\x12\x03,\x04\t\n\x0e\n\x07\x04\x02\x03\x01\x02\
    \x08\x01\x12\x03,\n\x13\n\x0e\n\x07\x04\x02\x03\x01\x02\x08\x03\x12\x03,\
    \x16\x18\n\r\n\x06\x04\x02\x03\x01\x02\t\x12\x03-\x04\x19\n\x0e\n\x07\
    \x04\x02\x03\x01\x02\t\x05\x12\x03-\x04\t\n\x0e\n\x07\x04\x02\x03\x01\
    \x02\t\x01\x12\x03-\n\x13\n\x0e\n\x07\x04\x02\x03\x01\x02\t\x03\x12\x03-\
    \x16\x18\n\x0b\n\x04\x04\x02\x02\0\x12\x030\x02\x13\n\x0c\n\x05\x04\x02\
    \x02\0\x06\x12\x030\x02\x05\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x030\x06\
    \x0e\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x030\x11\x12\nP\n\x04\x04\x02\x02\
    \x01\x12\x032\x02\x1f\x1aC\x20only\x20support\x20size\x20=\x201,\x20\x20\
    repeated\x20list\x20here\x20for\x20muti-sig\x20extension\n\n\x0c\n\x05\
    \x04\x02\x02\x01\x04\x12\x032\x02\n\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\
    \x032\x0b\x10\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x032\x11\x1a\n\x0c\n\
    \x05\x04\x02\x02\x01\x03\x12\x032\x1d\x1eb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(AccountId::generated_message_descriptor_data());
            messages.push(Authority::generated_message_descriptor_data());
            messages.push(Transaction::generated_message_descriptor_data());
            messages.push(transaction::Contract::generated_message_descriptor_data());
            messages.push(transaction::Raw::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(transaction::contract::ContractType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
